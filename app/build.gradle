apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../quality/jacoco.gradle'
apply from: '../quality/ktlint.gradle'

def config = rootProject.ext.configuration
def lib = rootProject.ext.library
def tests = rootProject.ext.testing
def signing = rootProject.ext.signing

android {
    compileSdkVersion config.compile_sdk_version
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId config.application_id
        minSdkVersion config.min_sdk_version
        targetSdkVersion config.target_sdk_version
        versionCode config.version_code
        versionName config.version_name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField 'String', 'tmdb_api_key', config.tmdb_api_key
    }

    signingConfigs {
        release {
            try {
                storeFile file(signing.keystore)
                storePassword signing.keystore_password
                keyAlias signing.alias
                keyPassword signing.alias_password
            } catch (ignored) {
                throw new InvalidUserDataException("You have to define: " +
                        "keystore, keystore_password, alias, alias_password " +
                        "in secure/keystore.properties file")
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation project(':core')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$lib.kotlin"

    // Android Architecture
    implementation "android.arch.lifecycle:extensions:$lib.android_architecture"

    // Android Support
    implementation "com.android.support:appcompat-v7:$lib.android_support"
    implementation "com.android.support:design:$lib.android_support"
    implementation "com.android.support.constraint:constraint-layout:$lib.constraint_layout"

    // Dagger
    implementation "com.google.dagger:dagger-android:$lib.dagger"
    implementation "com.google.dagger:dagger-android-support:$lib.dagger"
    kapt "com.google.dagger:dagger-android-processor:$lib.dagger"
    kapt "com.google.dagger:dagger-compiler:$lib.dagger"

    // Retrofit
    implementation "com.squareup.okhttp3:logging-interceptor:$lib.okhttp"
    implementation "com.squareup.retrofit2:retrofit:$lib.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$lib.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$lib.retrofit"

    // Rx
    implementation "io.reactivex.rxjava2:rxandroid:$lib.rxandroid"
    implementation "io.reactivex.rxjava2:rxjava:$lib.rxjava"

    // Tests
    testImplementation "junit:junit:$tests.junit"
    testImplementation "org.mockito:mockito-core:$tests.mockito"
}
