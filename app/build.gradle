apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../jacoco.gradle'
apply from: '../quality.gradle'

def config = rootProject.ext.configuration
def lib = rootProject.ext.library
def tests = rootProject.ext.testing
def signing = rootProject.ext.signing
def quality = rootProject.ext.quality

android {
    compileSdkVersion config.compile_sdk_version
    buildToolsVersion config.build_tools_version

    defaultConfig {
        applicationId config.application_id
        minSdkVersion config.min_sdk_version
        targetSdkVersion config.target_sdk_version
        versionCode config.version_code
        versionName config.version_name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField 'String', 'tmdb_api_key', config.tmdb_api_key
    }

    signingConfigs {
        release {
            try {
                storeFile file(signing.keystore)
                storePassword signing.keystore_password
                keyAlias signing.alias
                keyPassword signing.alias_password
            } catch (ignored) {
                throw new InvalidUserDataException("You have to define: " +
                        "keystore, keystore_password, alias, alias_password " +
                        "in secure/keystore.properties file")
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError true
        xmlReport false
        htmlReport true
        lintConfig file("$quality.config_dir/lint.xml")
        htmlOutput file("$quality.reports_dir/lint/lint-result.html")
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    kapt {
        generateStubs = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':core')

    // Android Support
    compile "com.android.support:appcompat-v7:$lib.android_support"
    compile "com.android.support:design:$lib.android_support"
    compile "com.android.support.constraint:constraint-layout:$lib.constraint_layout"

    // Dagger
    compile "com.google.dagger:dagger-android:$lib.dagger"
    compile "com.google.dagger:dagger-android-support:$lib.dagger"
    kapt "com.google.dagger:dagger-android-processor:$lib.dagger"
    kapt "com.google.dagger:dagger-compiler:$lib.dagger"

    // Retrofit
    compile "com.squareup.okhttp3:logging-interceptor:$lib.okhttp"
    compile "com.squareup.retrofit2:retrofit:$lib.retrofit"
    compile "com.squareup.retrofit2:converter-gson:$lib.retrofit"
    compile "com.squareup.retrofit2:adapter-rxjava2:$lib.retrofit"

    // Rx
    compile "io.reactivex.rxjava2:rxandroid:$lib.rxandroid"
    compile "io.reactivex.rxjava2:rxjava:$lib.rxjava"

    testCompile "junit:junit:$tests.junit"
    testCompile "org.mockito:mockito-core:$tests.mockito"

    androidTestCompile("com.android.support.test.espresso:espresso-core:$tests.espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    })
}
